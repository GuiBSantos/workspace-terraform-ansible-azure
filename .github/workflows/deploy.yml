name: Deploy Terraform to Azure - 2

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destruir infraestrutura'
        required: true
        default: 'false'
    
permissions:
  id-token: write
  contents: read

jobs:
  validate:
    if: ${{ github.event.inputs.destroy == 'false' }}
    name: Validar Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do codigo
        uses: actions/checkout@v4
      
      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Validar Sintaxe e Plano
        working-directory: infra
        run: |
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          terraform init
          terraform fmt -check
          terraform validate
          terraform plan -out=tfplan

  deploy:
    if: ${{ github.event.inputs.destroy == 'false' }}
    name: Deploy e Configuração
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      vmName: ${{ steps.output_vm.outputs.vm_name }}
      adminUsername: ${{ steps.output_vm.outputs.admin_username }}
      publicIP: ${{ steps.output_vm.outputs.public_ip }}
      nsgName: ${{ steps.output_vm.outputs.nsg_name }}
      resourceGroup: ${{ steps.output_vm.outputs.resource_group }}
    steps:
      - name: Checkout do codigo
        uses: actions/checkout@v4
      
      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Aplicar Terraform
        working-directory: infra
        run: |
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          terraform init
          terraform apply -auto-approve

      - name: Capturar Outputs
        id: output_vm
        working-directory: infra
        run: |
          echo "vm_name=$(terraform output -raw vm_name)" >> $GITHUB_OUTPUT
          echo "admin_username=$(terraform output -raw admin_username)" >> $GITHUB_OUTPUT
          echo "public_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT
          echo "nsg_name=$(terraform output -raw nsg_name)" >> $GITHUB_OUTPUT
          echo "resource_group=$(terraform output -raw resource_group)" >> $GITHUB_OUTPUT

      - name: Definir variaveis
        run: |
          echo "VM_NAME=${{ steps.output_vm.outputs.vm_name }}" >> $GITHUB_ENV
          echo "ADMIN_USERNAME=${{ steps.output_vm.outputs.admin_username }}" >> $GITHUB_ENV
          echo "PUBLIC_IP=${{ steps.output_vm.outputs.public_ip }}" >> $GITHUB_ENV
          echo "NSG_NAME=${{ steps.output_vm.outputs.nsg_name }}" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=${{ steps.output_vm.outputs.resource_group }}" >> $GITHUB_ENV
          echo "SSH_COMMAND=ssh azureuser@${{ steps.output_vm.outputs.public_ip }} -o StrictHostKeyChecking=no" >> $GITHUB_ENV
      
      - name: Instalar Ansible e sshpass
        run: |
          sudo apt update
          sudo apt install -y ansible sshpass

      - name: Criar Inventario Ansible
        run: |
          echo "[vm]" > inventory
          echo "${{ env.PUBLIC_IP }} ansible_user=${{ env.ADMIN_USERNAME }} ansible_ssh_common_args='-o StrictHostKeyChecking=no' ansible_ssh_pass='${{ secrets.VM_PASSWORD }}'" >> inventory

      - name: Executar Playbook Ansible
        run: |
          ansible-playbook -i inventory ansible/playbook.yml --extra-vars "ansible_sudo_pass=${{ secrets.ADMIN_PASSWORD }}"
  
  post-tests:
    if: ${{ github.event.inputs.destroy == 'false' }}
    name: Testes Pós-Deploy
    needs: deploy
    runs-on: ubuntu-latest
    env:
      PUBLIC_IP: ${{ needs.deploy.outputs.publicIP }}
      VM_NAME: ${{ needs.deploy.outputs.vmName }}
      NSG_NAME: ${{ needs.deploy.outputs.nsgName }}
      RESOURCE_GROUP: ${{ needs.deploy.outputs.resourceGroup }}
      ADMIN_USERNAME: ${{ needs.deploy.outputs.adminUsername }}
    steps:
      - name: Checkout do codigo
        uses: actions/checkout@v4
      
      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Testar Swagger na Porta 8081
        run: |
          echo "Aguardando a aplicação subir..."
          sleep 60
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.PUBLIC_IP }}:8081/swagger-ui/index.html)
          if [ "$response" != "200" ]; then
            echo "A aplicação não está acessível. Código de resposta: $response"
            exit 1
          fi

      - name: Verificar Status da VM
        run: |
          status=$(az vm get-instance-view --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.VM_NAME }} --query "instanceView.statuses[?starts_with(code, 'PowerState/')].displayStatus" -o tsv)
          echo "Status da VM: $status"
          if [ "$status" != "VM running" ]; then
            exit 1
          fi

      - name: Verificar Regras do NSG para Porta 8081
        run: |
          result=$(az network nsg rule list --nsg-name ${{ env.NSG_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "[?destinationPortRange=='8081' && access=='Allow']" -o tsv)
          if [ -z "$result" ]; then
            echo "A regra para a porta 8081 não está configurada corretamente no NSG."
            exit 1
          fi

  destroy:
    if: ${{ github.event.inputs.destroy == 'true' }}
    name: Destruir Infraestrutura
    runs-on: ubuntu-latest
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout do codigo
        uses: actions/checkout@v4
      
      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Destruir Terraform
        working-directory: infra
        run: |
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          terraform init
          terraform destroy -auto-approve
